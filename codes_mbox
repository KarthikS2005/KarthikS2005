{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "17cdc682-6109-440e-a1ab-2a0d59b92f40",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b8e7c44b-c551-4c5a-b64d-8470683754fb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<mailbox.mbox at 0x163afeffec0>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import mailbox\n",
    "mboxfile = \"All mail Including Spam and Trash.mbox\"\n",
    "mbox = mailbox.mbox(mboxfile)\n",
    "mbox"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bb967fc9-4a6f-4485-8968-2aa459cf3060",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X-GM-THRID\n",
      "X-Gmail-Labels\n",
      "MIME-Version\n",
      "Date\n",
      "Message-ID\n",
      "Subject\n",
      "From\n",
      "To\n",
      "Content-Type\n"
     ]
    }
   ],
   "source": [
    "for key in mbox[0].keys():\n",
    "  print(key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e4bec58e-6582-46ed-8573-d4421c460535",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "fde41149-0faa-4a38-a468-0d81ae0d6a3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import csv\n",
    "\n",
    "with open('mailbox.csv', 'w', newline='') as outputfile:\n",
    "    writer = csv.writer(outputfile)\n",
    "    writer.writerow(['subject', 'from', 'date', 'to', 'label', 'thread'])\n",
    "\n",
    "    for message in mbox:\n",
    "        writer.writerow([\n",
    "            message['subject'],\n",
    "            message['from'],\n",
    "            message['date'],\n",
    "            message['to'],\n",
    "            message['X-Gmail-Labels'],\n",
    "            message['X-GM-THRID']\n",
    "        ])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "710503c0-9e74-40d9-9d21-2f7f0ccc144e",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs = pd.read_csv('mailbox.csv', names=['subject', 'from', 'date', 'to',\n",
    "'label', 'thread'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "efb90172-a8bf-42b3-a7c1-f63e82ace344",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "subject    object\n",
       "from       object\n",
       "date       object\n",
       "to         object\n",
       "label      object\n",
       "thread     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfs.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "efcf8965-bffe-4a7e-9f32-fefc391495cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs['date'] = dfs['date'].apply(lambda x: pd.to_datetime(x,\n",
    "errors='coerce', utc=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ad8b2120-d2e9-4a80-8f19-832c19b5aa54",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs = dfs[dfs['date'].notna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7e7c2edf-a8ae-4b48-b8dc-3880707a83bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs.to_csv('gmail.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "592d780e-ed67-4c7b-99ce-c1c94418b378",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 5 entries, 1 to 5\n",
      "Data columns (total 6 columns):\n",
      " #   Column   Non-Null Count  Dtype              \n",
      "---  ------   --------------  -----              \n",
      " 0   subject  2 non-null      object             \n",
      " 1   from     5 non-null      object             \n",
      " 2   date     5 non-null      datetime64[ns, UTC]\n",
      " 3   to       5 non-null      object             \n",
      " 4   label    5 non-null      object             \n",
      " 5   thread   5 non-null      object             \n",
      "dtypes: datetime64[ns, UTC](1), object(5)\n",
      "memory usage: 280.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "dfs.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0f9180f5-02f0-479d-b1f4-abf45222db7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>subject</th>\n",
       "      <th>from</th>\n",
       "      <th>date</th>\n",
       "      <th>to</th>\n",
       "      <th>label</th>\n",
       "      <th>thread</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>dark gen &lt;darkgen18@gmail.com&gt;</td>\n",
       "      <td>2025-10-10 04:00:59+00:00</td>\n",
       "      <td>rohithbs91@gmail.com</td>\n",
       "      <td>Archived,Sent</td>\n",
       "      <td>1845565934458667777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>dark gen &lt;darkgen18@gmail.com&gt;</td>\n",
       "      <td>2025-10-10 03:59:28+00:00</td>\n",
       "      <td>25dipcse002@bnmit.in</td>\n",
       "      <td>Archived,Sent</td>\n",
       "      <td>1845565865467386025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Delivery Status Notification (Failure)</td>\n",
       "      <td>Mail Delivery Subsystem &lt;mailer-daemon@googlem...</td>\n",
       "      <td>2025-10-10 04:00:09+00:00</td>\n",
       "      <td>darkgen18@gmail.com</td>\n",
       "      <td>Inbox,Category Updates,Unread</td>\n",
       "      <td>1845565894112936840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>dark gen &lt;darkgen18@gmail.com&gt;</td>\n",
       "      <td>2025-10-10 03:59:57+00:00</td>\n",
       "      <td>25dip001@bnmit.in</td>\n",
       "      <td>Archived,Sent</td>\n",
       "      <td>1845565894112936840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Security alert</td>\n",
       "      <td>Google &lt;no-reply@accounts.google.com&gt;</td>\n",
       "      <td>2025-10-10 03:58:36+00:00</td>\n",
       "      <td>darkgen18@gmail.com</td>\n",
       "      <td>Inbox,Category Updates,Unread</td>\n",
       "      <td>1845565820242161242</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  subject  \\\n",
       "1                                     NaN   \n",
       "2                                     NaN   \n",
       "3  Delivery Status Notification (Failure)   \n",
       "4                                     NaN   \n",
       "5                          Security alert   \n",
       "\n",
       "                                                from  \\\n",
       "1                     dark gen <darkgen18@gmail.com>   \n",
       "2                     dark gen <darkgen18@gmail.com>   \n",
       "3  Mail Delivery Subsystem <mailer-daemon@googlem...   \n",
       "4                     dark gen <darkgen18@gmail.com>   \n",
       "5              Google <no-reply@accounts.google.com>   \n",
       "\n",
       "                       date                    to  \\\n",
       "1 2025-10-10 04:00:59+00:00  rohithbs91@gmail.com   \n",
       "2 2025-10-10 03:59:28+00:00  25dipcse002@bnmit.in   \n",
       "3 2025-10-10 04:00:09+00:00   darkgen18@gmail.com   \n",
       "4 2025-10-10 03:59:57+00:00     25dip001@bnmit.in   \n",
       "5 2025-10-10 03:58:36+00:00   darkgen18@gmail.com   \n",
       "\n",
       "                           label               thread  \n",
       "1                  Archived,Sent  1845565934458667777  \n",
       "2                  Archived,Sent  1845565865467386025  \n",
       "3  Inbox,Category Updates,Unread  1845565894112936840  \n",
       "4                  Archived,Sent  1845565894112936840  \n",
       "5  Inbox,Category Updates,Unread  1845565820242161242  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfs.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ea79ba17-6cb9-476a-a258-5ddc08760fc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import numpy as np\n",
    "def extract_email_ID(string):\n",
    "    email = re.findall(r'<(.+?)>', string)\n",
    "    if not email:\n",
    "        email = list(filter(lambda y: '@' in y, string.split()))\n",
    "    return email[0] if email else np.nan\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "cd5606ea-5007-4a2d-bc88-0c63ff78b44f",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs['from'] = dfs['from'].apply(lambda x: extract_email_ID(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bfaa71fd-c369-4dbe-bbbf-688cce5b999e",
   "metadata": {},
   "outputs": [],
   "source": [
    "myemail = 'itsmeskm99@gmail.com'\n",
    "dfs['label'] = dfs['from'].apply(lambda x: 'sent' if x==myemail\n",
    "else 'inbox')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "e647574f-6d0c-48fb-b8e6-f3148cba5225",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs.drop(columns='to', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b0b68462-6f6c-4359-968b-1d92695bb73e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>subject</th>\n",
       "      <th>from</th>\n",
       "      <th>date</th>\n",
       "      <th>label</th>\n",
       "      <th>thread</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>darkgen18@gmail.com</td>\n",
       "      <td>2025-10-10 04:00:59+00:00</td>\n",
       "      <td>inbox</td>\n",
       "      <td>1845565934458667777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>darkgen18@gmail.com</td>\n",
       "      <td>2025-10-10 03:59:28+00:00</td>\n",
       "      <td>inbox</td>\n",
       "      <td>1845565865467386025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Delivery Status Notification (Failure)</td>\n",
       "      <td>mailer-daemon@googlemail.com</td>\n",
       "      <td>2025-10-10 04:00:09+00:00</td>\n",
       "      <td>inbox</td>\n",
       "      <td>1845565894112936840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>darkgen18@gmail.com</td>\n",
       "      <td>2025-10-10 03:59:57+00:00</td>\n",
       "      <td>inbox</td>\n",
       "      <td>1845565894112936840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Security alert</td>\n",
       "      <td>no-reply@accounts.google.com</td>\n",
       "      <td>2025-10-10 03:58:36+00:00</td>\n",
       "      <td>inbox</td>\n",
       "      <td>1845565820242161242</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  subject                          from  \\\n",
       "1                                     NaN           darkgen18@gmail.com   \n",
       "2                                     NaN           darkgen18@gmail.com   \n",
       "3  Delivery Status Notification (Failure)  mailer-daemon@googlemail.com   \n",
       "4                                     NaN           darkgen18@gmail.com   \n",
       "5                          Security alert  no-reply@accounts.google.com   \n",
       "\n",
       "                       date  label               thread  \n",
       "1 2025-10-10 04:00:59+00:00  inbox  1845565934458667777  \n",
       "2 2025-10-10 03:59:28+00:00  inbox  1845565865467386025  \n",
       "3 2025-10-10 04:00:09+00:00  inbox  1845565894112936840  \n",
       "4 2025-10-10 03:59:57+00:00  inbox  1845565894112936840  \n",
       "5 2025-10-10 03:58:36+00:00  inbox  1845565820242161242  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfs.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6f5bdee2-5564-4e0d-a506-b861e877163b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "import pytz\n",
    "\n",
    "def refactor_timezone(x):\n",
    "    est = pytz.timezone('US/Eastern')\n",
    "    return x.astimezone(est)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "85fc146b-f528-4155-b1e7-dbec8cad89f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs['date'] = dfs['date'].apply(lambda x: refactor_timezone(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "1b0a3237-fed6-4c41-83cb-f47b99cbd3b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "dfs['dayofweek'] = dfs['date'].apply(lambda x: x.day_name())\n",
    "dfs['dayofweek'] = pd.Categorical(\n",
    "    dfs['dayofweek'],\n",
    "    categories=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n",
    "    ordered=True\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ae5966de-63c9-49f2-b2f0-fe04b464ee26",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs['timeofday'] = dfs['date'].apply(lambda x: x.hour + x.minute/60 + x.second/3600)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "66869252-089e-4238-b131-99d72e6426c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs['hour'] = dfs['date'].apply(lambda x: x.hour)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "cbc59112-c736-4f64-8e5e-586e920043ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs['year_int'] = dfs['date'].apply(lambda x: x.year)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "d2a614d2-6890-44d4-8b7f-497bce8304b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs['year'] = dfs['date'].apply(lambda x: x.year + x.dayofyear/365.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "f760c88d-b80a-49d8-80f1-04171816213c",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfs.index = dfs['date']\n",
    "del dfs['date']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "fd271075-3a4d-46d7-95db-950d7c76f797",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Thu, 09 Oct 2025 11:58 PM\n",
      "Fri, 10 Oct 2025 12:00 AM\n"
     ]
    }
   ],
   "source": [
    "print(dfs.index.min().strftime('%a, %d %b %Y %I:%M %p'))\n",
    "print(dfs.index.max().strftime('%a, %d %b %Y %I:%M %p'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "01d715e5-2a88-4f66-9790-e409235762b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "label\n",
      "inbox    5\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(dfs['label'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "6ed9e7fa-6fe5-40a2-835e-d2bf8b7ea0a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "label\n",
      "inbox    5\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(dfs['label'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "1e5f6daa-70af-489d-b03a-4b783fa32ac0",
   "metadata": {},
   "outputs": [],
   "source": [
    "sent = dfs[dfs['label']=='sent']\n",
    "received = dfs[dfs['label']=='inbox']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "fc02e653-87be-4e90-9c0e-f0b422e5d184",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "from scipy import ndimage\n",
    "import matplotlib.gridspec as gridspec\n",
    "import matplotlib.patches as mpatches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "8bebdd73-6c67-4ea0-bdd2-ed81858e6e73",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import datetime\n",
    "import pytz\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "\n",
    "def plot_todo_vs_year(df, ax, color='C0', s=0.5, title=''):\n",
    "    ind = np.zeros(len(df), dtype='bool')\n",
    "    est = pytz.timezone('US/Eastern')\n",
    "\n",
    "    df[~ind].plot.scatter('year', 'timeofday', s=s, alpha=0.6, ax=ax, color=color)\n",
    "\n",
    "    ax.set_ylim(0, 24)\n",
    "    ax.yaxis.set_major_locator(MaxNLocator(8))\n",
    "    ax.set_yticklabels([\n",
    "        datetime.datetime.strptime(str(int(np.mod(ts, 24))), \"%H\").strftime(\"%I %p\")\n",
    "        for ts in ax.get_yticks()\n",
    "    ])\n",
    "    ax.set_xlabel('')\n",
    "    ax.set_ylabel('')\n",
    "    ax.set_title(title)\n",
    "    ax.grid(ls=':', color='k')\n",
    "\n",
    "    return ax\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import datetime\n",
    "import pytz\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "\n",
    "def plot_todo_vs_year(df, ax, color='C0', s=0.5, title=''):\n",
    "    ind = np.zeros(len(df), dtype='bool')\n",
    "    est = pytz.timezone('US/Eastern')\n",
    "\n",
    "    df[~ind].plot.scatter('year', 'timeofday', s=s, alpha=0.6, ax=ax, color=color)\n",
    "\n",
    "    ax.set_ylim(0, 24)\n",
    "    ax.yaxis.set_major_locator(MaxNLocator(8))\n",
    "    ax.set_yticklabels([\n",
    "        datetime.datetime.strptime(str(int(np.mod(ts, 24))), \"%H\").strftime(\"%I %p\")\n",
    "        for ts in ax.get_yticks()\n",
    "    ])\n",
    "    ax.set_xlabel('')\n",
    "    ax.set_ylabel('')\n",
    "    ax.set_title(title)\n",
    "    ax.grid(ls=':', color='k')\n",
    "\n",
    "    return ax\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "5bb48131-9de1-4def-8de8-7a59ed8dfcdc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Student\\AppData\\Local\\Temp\\ipykernel_16796\\795505973.py:39: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.\n",
      "  ax.set_yticklabels([\n",
      "C:\\Users\\Student\\AppData\\Local\\Temp\\ipykernel_16796\\795505973.py:39: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.\n",
      "  ax.set_yticklabels([\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Received'}>"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15, 4))\n",
    "plot_todo_vs_year(sent, ax[0], title='Sent')\n",
    "plot_todo_vs_year(received, ax[1], title='Received')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "139270ae-59d5-4af5-984a-0019a74949e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def plot_number_perday_per_year(df, ax, label=None, dt=0.3, **plot_kwargs):\n",
    "    year = df[df['year'].notna()]['year'].values\n",
    "    T = year.max() - year.min()\n",
    "    bins = int(T / dt)\n",
    "\n",
    "    weights = 1 / (np.ones_like(year) * dt * 365.25)\n",
    "    ax.hist(year, bins=bins, weights=weights, label=label, **plot_kwargs)\n",
    "\n",
    "    ax.set_xlabel('Year')\n",
    "    ax.set_ylabel('Messages per day')\n",
    "    if label:\n",
    "        ax.legend()\n",
    "    ax.grid(ls=':', color='k')\n",
    "\n",
    "    return ax\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "51c4f7e0-30dd-45c1-b776-82112fbfb6fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import datetime\n",
    "from scipy import ndimage\n",
    "from scipy.interpolate import interp1d\n",
    "from matplotlib.ticker import MaxNLocator\n",
    "\n",
    "def plot_number_perdhour_per_year(df, ax, label=None, dt=1, smooth=False,\n",
    "                                  weight_fun=None, **plot_kwargs):\n",
    "    tod = df[df['timeofday'].notna()]['timeofday'].values\n",
    "    year = df[df['year'].notna()]['year'].values\n",
    "    Ty = year.max() - year.min()\n",
    "    T = tod.max() - tod.min()\n",
    "    bins = int(T / dt)\n",
    "\n",
    "    if weight_fun is None:\n",
    "        weights = 1 / (np.ones_like(tod) * Ty * 365.25 / dt)\n",
    "    else:\n",
    "        weights = weight_fun(df)\n",
    "\n",
    "    if smooth:\n",
    "        hst, xedges = np.histogram(tod, bins=bins, weights=weights)\n",
    "        x = np.delete(xedges, -1) + 0.5 * (xedges[1] - xedges[0])\n",
    "        hst = ndimage.gaussian_filter(hst, sigma=0.75)\n",
    "        f = interp1d(x, hst, kind='cubic')\n",
    "        x = np.linspace(x.min(), x.max(), 10000)\n",
    "        hst = f(x)\n",
    "        ax.plot(x, hst, label=label, **plot_kwargs)\n",
    "    else:\n",
    "        ax.hist(tod, bins=bins, weights=weights, label=label, **plot_kwargs)\n",
    "\n",
    "    ax.grid(ls=':', color='k')\n",
    "\n",
    "    orientation = plot_kwargs.get('orientation')\n",
    "    if orientation is None or orientation == 'vertical':\n",
    "        ax.set_xlim(0, 24)\n",
    "        ax.xaxis.set_major_locator(MaxNLocator(8))\n",
    "        ax.set_xticklabels([\n",
    "            datetime.datetime.strptime(str(int(np.mod(ts, 24))), \"%H\").strftime(\"%I %p\")\n",
    "            for ts in ax.get_xticks()\n",
    "        ])\n",
    "    elif orientation == 'horizontal':\n",
    "        ax.set_ylim(0, 24)\n",
    "        ax.yaxis.set_major_locator(MaxNLocator(8))\n",
    "        ax.set_yticklabels([\n",
    "            datetime.datetime.strptime(str(int(np.mod(ts, 24))), \"%H\").strftime(\"%I %p\")\n",
    "            for ts in ax.get_yticks()\n",
    "        ])\n",
    "\n",
    "    return ax\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "cd6f7ea0-0eb3-41ce-b82d-47ee9f4a7a2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import gridspec\n",
    "\n",
    "class TriplePlot:\n",
    "    def __init__(self):\n",
    "        gs = gridspec.GridSpec(6, 6)\n",
    "        self.ax1 = plt.subplot(gs[2:6, :4])\n",
    "        self.ax2 = plt.subplot(gs[2:6, 4:6], sharey=self.ax1)\n",
    "        plt.setp(self.ax2.get_yticklabels(), visible=False)\n",
    "        self.ax3 = plt.subplot(gs[:2, :4])\n",
    "        plt.setp(self.ax3.get_xticklabels(), visible=False)\n",
    "\n",
    "    def plot(self, df, color='darkblue', alpha=0.8, markersize=0.5,\n",
    "             yr_bin=0.1, hr_bin=0.5):\n",
    "        plot_todo_vs_year(df, self.ax1, color=color, s=markersize)\n",
    "        plot_number_perdhour_per_year(df, self.ax2, dt=hr_bin,\n",
    "                                      color=color, alpha=alpha, orientation='horizontal')\n",
    "        self.ax2.set_xlabel('Average emails per hour')\n",
    "\n",
    "        plot_number_perday_per_year(df, self.ax3, dt=yr_bin,\n",
    "                                    color=color, alpha=alpha)\n",
    "        self.ax3.set_ylabel('Average emails per day')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e052d1f-6ead-4ca3-8986-9bc8ee40627b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e456f56a-f5ca-49ab-9205-efb5e11f17c3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
